{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KDJ\\\\Documents\\\\GitHub\\\\Graduation-Project\\\\LookLook-WebApplication\\\\src\\\\components\\\\alert\\\\alertBuilder.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModalContainer = styled.div`\n  // Modal을 구현하는데 전체적으로 필요한 CSS를 구현\n  display : flex;\n  justify-content : center;\n  align-items : center;\n  height : 100%;\n`;\n_c = ModalContainer;\nexport const ModalBackdrop = styled.div`\n  // Modal이 떴을 때의 배경을 깔아주는 CSS를 구현\n  z-index: 1; //위치지정 요소\n  position: fixed;\n  display : flex;\n  justify-content : center;\n  align-items : center;\n  background-color: rgba(0,0,0,0.4);\n  border-radius: 10px;\n  top : 0;\n  left : 0;\n  right : 0;\n  bottom : 0;\n`;\n_c2 = ModalBackdrop;\nexport const ModalBtn = styled.button`\n  background-color: var(--coz-purple-600);\n  text-decoration: none;\n  border: none;\n  padding: 20px;\n  color: white;\n  border-radius: 30px;\n`;\n_c3 = ModalBtn;\nexport const ExitBtn = styled(ModalBtn)`\n  background-color : #4000c7;\n  border-radius: 10px;\n  text-decoration: none;\n  margin: 10px;\n  padding: 5px 10px;\n  width: 40px;\n  height: 40px;\n  display : flex;\n  justify-content : center;\n  align-items : center;\n`;\n_c4 = ExitBtn;\nexport const ModalView = styled.div.attrs(props => ({\n  // attrs 메소드를 이용해서 아래와 같이 div 엘리먼트에 속성을 추가할 수 있다.\n  role: 'dialog'\n}))`\n  // Modal창 CSS를 구현합니다.\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  border-radius: 20px;\n  width: 500px;\n  heigth: 200px;\n  background-color: #ffffff;\n    >div.desc {\n      margin: 50px;\n      font-size: 20px;\n      color: var(--coz-purple-600);\n    }\n`;\n_c5 = ModalView;\nfunction AlertBuilder(alertText) {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const openModalHandler = () => {\n    // isOpen의 상태를 변경하는 메소드를 구현\n    // !false -> !true -> !false\n    setIsOpen(!isOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(ModalContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ModalBtn, {\n      onClick: openModalHandler\n      // 클릭하면 Modal이 열린 상태(isOpen)를 boolean 타입으로 변경하는 메소드가 실행되어야 합니다. \n      ,\n      children: \" Open Modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), isOpen ? /*#__PURE__*/_jsxDEV(ModalBackdrop, {\n      onClick: openModalHandler,\n      children: [\"//event \\uBC84\\uBE14\\uB9C1\\uC744 \\uB9C9\\uB294 \\uBA54\\uC18C\\uB4DC\", /*#__PURE__*/_jsxDEV(ModalView, {\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(ExitBtn, {\n          onClick: openModalHandler,\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"desc\",\n          children: \"HELLO FEJIGU!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(AlertBuilder, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c6 = AlertBuilder;\nexport default AlertBuilder;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ModalContainer\");\n$RefreshReg$(_c2, \"ModalBackdrop\");\n$RefreshReg$(_c3, \"ModalBtn\");\n$RefreshReg$(_c4, \"ExitBtn\");\n$RefreshReg$(_c5, \"ModalView\");\n$RefreshReg$(_c6, \"AlertBuilder\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","ModalContainer","div","_c","ModalBackdrop","_c2","ModalBtn","button","_c3","ExitBtn","_c4","ModalView","attrs","props","role","_c5","AlertBuilder","alertText","_s","isOpen","setIsOpen","useState","openModalHandler","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","stopPropagation","className","_c6","$RefreshReg$"],"sources":["C:/Users/KDJ/Documents/GitHub/Graduation-Project/LookLook-WebApplication/src/components/alert/alertBuilder.jsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const ModalContainer = styled.div`\r\n  // Modal을 구현하는데 전체적으로 필요한 CSS를 구현\r\n  display : flex;\r\n  justify-content : center;\r\n  align-items : center;\r\n  height : 100%;\r\n`;\r\n\r\nexport const ModalBackdrop = styled.div`\r\n  // Modal이 떴을 때의 배경을 깔아주는 CSS를 구현\r\n  z-index: 1; //위치지정 요소\r\n  position: fixed;\r\n  display : flex;\r\n  justify-content : center;\r\n  align-items : center;\r\n  background-color: rgba(0,0,0,0.4);\r\n  border-radius: 10px;\r\n  top : 0;\r\n  left : 0;\r\n  right : 0;\r\n  bottom : 0;\r\n`;\r\n\r\nexport const ModalBtn = styled.button`\r\n  background-color: var(--coz-purple-600);\r\n  text-decoration: none;\r\n  border: none;\r\n  padding: 20px;\r\n  color: white;\r\n  border-radius: 30px;\r\n`;\r\n\r\nexport const ExitBtn = styled(ModalBtn) `\r\n  background-color : #4000c7;\r\n  border-radius: 10px;\r\n  text-decoration: none;\r\n  margin: 10px;\r\n  padding: 5px 10px;\r\n  width: 40px;\r\n  height: 40px;\r\n  display : flex;\r\n  justify-content : center;\r\n  align-items : center;\r\n`;\r\n\r\nexport const ModalView = styled.div.attrs((props) => ({\r\n  // attrs 메소드를 이용해서 아래와 같이 div 엘리먼트에 속성을 추가할 수 있다.\r\n  role: 'dialog',\r\n}))`\r\n  // Modal창 CSS를 구현합니다.\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  border-radius: 20px;\r\n  width: 500px;\r\n  heigth: 200px;\r\n  background-color: #ffffff;\r\n    >div.desc {\r\n      margin: 50px;\r\n      font-size: 20px;\r\n      color: var(--coz-purple-600);\r\n    }\r\n`;\r\n\r\nfunction AlertBuilder(alertText) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const openModalHandler = () => {\r\n    // isOpen의 상태를 변경하는 메소드를 구현\r\n    // !false -> !true -> !false\r\n    setIsOpen(!isOpen) \r\n  };\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ModalBtn onClick={openModalHandler}\r\n      // 클릭하면 Modal이 열린 상태(isOpen)를 boolean 타입으로 변경하는 메소드가 실행되어야 합니다. \r\n      > Open Modal\r\n        {/* 조건부 렌더링을 활용해서 Modal이 열린 상태(isOpen이 true인 상태)일 때는 ModalBtn의 내부 텍스트가 'Opened!' 로 Modal이 닫힌 상태(isOpen이 false인 상태)일 때는 ModalBtn 의 내부 텍스트가 'Open Modal'이 되도록 구현 */}\r\n      </ModalBtn>\r\n      {/* 조건부 렌더링을 활용해서 Modal이 열린 상태(isOpen이 true인 상태)일 때만 모달창과 배경이 뜰 수 있게 구현 */}\r\n      {isOpen ? \r\n      <ModalBackdrop onClick={openModalHandler}>\r\n        //event 버블링을 막는 메소드 \r\n          <ModalView onClick={(e) => e.stopPropagation()}>\r\n            <ExitBtn onClick={openModalHandler}>x</ExitBtn>\r\n            <div className='desc'>HELLO FEJIGU!</div>\r\n          </ModalView>\r\n        </ModalBackdrop>\r\n        : null\r\n      }\r\n    </ModalContainer>\r\n  );\r\n}\r\n\r\nexport default AlertBuilder;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}