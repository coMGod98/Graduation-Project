{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\nvar dispatchReactUnityEvent = function (eventName) {\n  var parameters = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    parameters[_i - 1] = arguments[_i];\n  }\n  // This made should be made available to the global scope. When invoked, it\n  // will dispatch the given event to all event systems.\n  for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n    var eventSystem = eventSystems_1[_a];\n    if (typeof eventSystem !== \"undefined\") {\n      eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters, false));\n    }\n  }\n};\n/**\n * An event system.\n */\nvar EventSystem = /** @class */function () {\n  function EventSystem() {\n    /**\n     * The event map contains all the events that have been registered to the\n     * event system as a key-value pair of event name and event listener.\n     * @private\n     * @readonly\n     */\n    this.eventMap = new Map();\n    // The event system will be pushed to the global list of event system\n    // instances.\n    eventSystems.push(this);\n    // If we're running inside of a browser environment, some global properties\n    // will be made available on the window allowing for Unity to communicate.\n    if (typeof window !== \"undefined\") {\n      // Register the global dispatch method.\n      if (typeof window.dispatchReactUnityEvent === \"undefined\") {\n        window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n      }\n      // Create object for legacy bindings on the window.\n      if (typeof window.ReactUnityWebGL === \"undefined\") {\n        window.ReactUnityWebGL = {};\n      }\n    }\n  }\n  /**\n   * Registers an event to the system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {Function} eventListener the event's function\n   */\n  EventSystem.prototype.on = function (eventName, eventListener) {\n    // Adds the event to the event map.\n    this.eventMap.set(eventName, eventListener);\n    // Add legacy binding to the window.\n    if (typeof window !== \"undefined\") {\n      window.ReactUnityWebGL[eventName] = function () {\n        var parameters = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          parameters[_i] = arguments[_i];\n        }\n        return eventListener.apply(void 0, parameters);\n      };\n    }\n  };\n  /**\n   * Removes all the Event Listeners with a specific Event Name.\n   * @public\n   * @param {string} eventName the event's name\n   * @example unityContext.removeEventListener(\"progress\");\n   */\n  EventSystem.prototype.removeEventListener = function (eventName) {\n    // Remove the event from the event map.\n    this.eventMap.delete(eventName);\n    // Remove legacy binding from the window.\n    if (typeof window !== \"undefined\") {\n      delete window.ReactUnityWebGL[eventName];\n    }\n  };\n  /**\n   * Removes all the Event Listeners.\n   * @public\n   * @example unityContext.removeAllEventListeners();\n   */\n  EventSystem.prototype.removeAllEventListeners = function () {\n    // Remove legacy bindings from the window.\n    if (typeof window !== \"undefined\") {\n      this.eventMap.forEach(function (_value, key) {\n        delete window.ReactUnityWebGL[key];\n      });\n    }\n    // Clear the event map.\n    this.eventMap.clear();\n  };\n  /**\n   * Dispatches an event that has been registered to the event system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {any} parameters the event's parameters\n   * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n   */\n  EventSystem.prototype.dispatchEvent = function (eventName) {\n    var parameters = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      parameters[_i - 1] = arguments[_i];\n    }\n    var event = this.eventMap.get(eventName);\n    if (typeof event !== \"undefined\") {\n      event.apply(void 0, parameters);\n    }\n  };\n  return EventSystem;\n}();\nexports.EventSystem = EventSystem;","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Object","defineProperty","exports","value","EventSystem","eventSystems","dispatchReactUnityEvent","eventName","parameters","_i","_a","eventSystems_1","eventSystem","dispatchEvent","apply","eventMap","Map","push","window","ReactUnityWebGL","on","eventListener","set","removeEventListener","delete","removeAllEventListeners","forEach","_value","key","clear","event","get"],"sources":["C:/Users/KDJ/Documents/GitHub/Graduation-Project/LookLook-WebApplication/node_modules/react-unity-webgl/distribution/library/event-system.js"],"sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\nvar dispatchReactUnityEvent = function (eventName) {\n    var parameters = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        parameters[_i - 1] = arguments[_i];\n    }\n    // This made should be made available to the global scope. When invoked, it\n    // will dispatch the given event to all event systems.\n    for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n        var eventSystem = eventSystems_1[_a];\n        if (typeof eventSystem !== \"undefined\") {\n            eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters, false));\n        }\n    }\n};\n/**\n * An event system.\n */\nvar EventSystem = /** @class */ (function () {\n    function EventSystem() {\n        /**\n         * The event map contains all the events that have been registered to the\n         * event system as a key-value pair of event name and event listener.\n         * @private\n         * @readonly\n         */\n        this.eventMap = new Map();\n        // The event system will be pushed to the global list of event system\n        // instances.\n        eventSystems.push(this);\n        // If we're running inside of a browser environment, some global properties\n        // will be made available on the window allowing for Unity to communicate.\n        if (typeof window !== \"undefined\") {\n            // Register the global dispatch method.\n            if (typeof window.dispatchReactUnityEvent === \"undefined\") {\n                window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n            }\n            // Create object for legacy bindings on the window.\n            if (typeof window.ReactUnityWebGL === \"undefined\") {\n                window.ReactUnityWebGL = {};\n            }\n        }\n    }\n    /**\n     * Registers an event to the system.\n     * @public\n     * @param {string} eventName the event's name\n     * @param {Function} eventListener the event's function\n     */\n    EventSystem.prototype.on = function (eventName, eventListener) {\n        // Adds the event to the event map.\n        this.eventMap.set(eventName, eventListener);\n        // Add legacy binding to the window.\n        if (typeof window !== \"undefined\") {\n            window.ReactUnityWebGL[eventName] = function () {\n                var parameters = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    parameters[_i] = arguments[_i];\n                }\n                return eventListener.apply(void 0, parameters);\n            };\n        }\n    };\n    /**\n     * Removes all the Event Listeners with a specific Event Name.\n     * @public\n     * @param {string} eventName the event's name\n     * @example unityContext.removeEventListener(\"progress\");\n     */\n    EventSystem.prototype.removeEventListener = function (eventName) {\n        // Remove the event from the event map.\n        this.eventMap.delete(eventName);\n        // Remove legacy binding from the window.\n        if (typeof window !== \"undefined\") {\n            delete window.ReactUnityWebGL[eventName];\n        }\n    };\n    /**\n     * Removes all the Event Listeners.\n     * @public\n     * @example unityContext.removeAllEventListeners();\n     */\n    EventSystem.prototype.removeAllEventListeners = function () {\n        // Remove legacy bindings from the window.\n        if (typeof window !== \"undefined\") {\n            this.eventMap.forEach(function (_value, key) {\n                delete window.ReactUnityWebGL[key];\n            });\n        }\n        // Clear the event map.\n        this.eventMap.clear();\n    };\n    /**\n     * Dispatches an event that has been registered to the event system.\n     * @public\n     * @param {string} eventName the event's name\n     * @param {any} parameters the event's parameters\n     * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n     */\n    EventSystem.prototype.dispatchEvent = function (eventName) {\n        var parameters = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parameters[_i - 1] = arguments[_i];\n        }\n        var event = this.eventMap.get(eventName);\n        if (typeof event !== \"undefined\") {\n            event.apply(void 0, parameters);\n        }\n    };\n    return EventSystem;\n}());\nexports.EventSystem = EventSystem;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}